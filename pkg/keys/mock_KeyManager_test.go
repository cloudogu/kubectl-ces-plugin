// Code generated by mockery v2.20.0. DO NOT EDIT.

package keys

import (
	cesapp_libkeys "github.com/cloudogu/cesapp-lib/keys"
	mock "github.com/stretchr/testify/mock"
)

// MockKeyManager is an autogenerated mock type for the KeyManager type
type MockKeyManager struct {
	mock.Mock
}

type MockKeyManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKeyManager) EXPECT() *MockKeyManager_Expecter {
	return &MockKeyManager_Expecter{mock: &_m.Mock}
}

// ExistsPublicKey provides a mock function with given fields:
func (_m *MockKeyManager) ExistsPublicKey() (bool, error) {
	ret := _m.Called()

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeyManager_ExistsPublicKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistsPublicKey'
type MockKeyManager_ExistsPublicKey_Call struct {
	*mock.Call
}

// ExistsPublicKey is a helper method to define mock.On call
func (_e *MockKeyManager_Expecter) ExistsPublicKey() *MockKeyManager_ExistsPublicKey_Call {
	return &MockKeyManager_ExistsPublicKey_Call{Call: _e.mock.On("ExistsPublicKey")}
}

func (_c *MockKeyManager_ExistsPublicKey_Call) Run(run func()) *MockKeyManager_ExistsPublicKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKeyManager_ExistsPublicKey_Call) Return(_a0 bool, _a1 error) *MockKeyManager_ExistsPublicKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeyManager_ExistsPublicKey_Call) RunAndReturn(run func() (bool, error)) *MockKeyManager_ExistsPublicKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetPublicKey provides a mock function with given fields:
func (_m *MockKeyManager) GetPublicKey() (*cesapp_libkeys.PublicKey, error) {
	ret := _m.Called()

	var r0 *cesapp_libkeys.PublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func() (*cesapp_libkeys.PublicKey, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *cesapp_libkeys.PublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cesapp_libkeys.PublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeyManager_GetPublicKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublicKey'
type MockKeyManager_GetPublicKey_Call struct {
	*mock.Call
}

// GetPublicKey is a helper method to define mock.On call
func (_e *MockKeyManager_Expecter) GetPublicKey() *MockKeyManager_GetPublicKey_Call {
	return &MockKeyManager_GetPublicKey_Call{Call: _e.mock.On("GetPublicKey")}
}

func (_c *MockKeyManager_GetPublicKey_Call) Run(run func()) *MockKeyManager_GetPublicKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKeyManager_GetPublicKey_Call) Return(_a0 *cesapp_libkeys.PublicKey, _a1 error) *MockKeyManager_GetPublicKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeyManager_GetPublicKey_Call) RunAndReturn(run func() (*cesapp_libkeys.PublicKey, error)) *MockKeyManager_GetPublicKey_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockKeyManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockKeyManager creates a new instance of MockKeyManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockKeyManager(t mockConstructorTestingTNewMockKeyManager) *MockKeyManager {
	mock := &MockKeyManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
