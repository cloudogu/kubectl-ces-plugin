// Code generated by mockery v2.20.0. DO NOT EDIT.

package config

import mock "github.com/stretchr/testify/mock"

// MockPortForwarder is an autogenerated mock type for the PortForwarder type
type MockPortForwarder struct {
	mock.Mock
}

type MockPortForwarder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPortForwarder) EXPECT() *MockPortForwarder_Expecter {
	return &MockPortForwarder_Expecter{mock: &_m.Mock}
}

// ExecuteWithPortForward provides a mock function with given fields: fn
func (_m *MockPortForwarder) ExecuteWithPortForward(fn func() error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func() error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPortForwarder_ExecuteWithPortForward_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteWithPortForward'
type MockPortForwarder_ExecuteWithPortForward_Call struct {
	*mock.Call
}

// ExecuteWithPortForward is a helper method to define mock.On call
//  - fn func() error
func (_e *MockPortForwarder_Expecter) ExecuteWithPortForward(fn interface{}) *MockPortForwarder_ExecuteWithPortForward_Call {
	return &MockPortForwarder_ExecuteWithPortForward_Call{Call: _e.mock.On("ExecuteWithPortForward", fn)}
}

func (_c *MockPortForwarder_ExecuteWithPortForward_Call) Run(run func(fn func() error)) *MockPortForwarder_ExecuteWithPortForward_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func() error))
	})
	return _c
}

func (_c *MockPortForwarder_ExecuteWithPortForward_Call) Return(_a0 error) *MockPortForwarder_ExecuteWithPortForward_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPortForwarder_ExecuteWithPortForward_Call) RunAndReturn(run func(func() error) error) *MockPortForwarder_ExecuteWithPortForward_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockPortForwarder interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockPortForwarder creates a new instance of MockPortForwarder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockPortForwarder(t mockConstructorTestingTNewMockPortForwarder) *MockPortForwarder {
	mock := &MockPortForwarder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
