// Code generated by mockery v2.20.0. DO NOT EDIT.

package dogu_config

import (
	keys "github.com/cloudogu/cesapp-lib/keys"
	mock "github.com/stretchr/testify/mock"
)

// mockKeyManager is an autogenerated mock type for the keyManager type
type mockKeyManager struct {
	mock.Mock
}

type mockKeyManager_Expecter struct {
	mock *mock.Mock
}

func (_m *mockKeyManager) EXPECT() *mockKeyManager_Expecter {
	return &mockKeyManager_Expecter{mock: &_m.Mock}
}

// GetPublicKey provides a mock function with given fields:
func (_m *mockKeyManager) GetPublicKey() (*keys.PublicKey, error) {
	ret := _m.Called()

	var r0 *keys.PublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func() (*keys.PublicKey, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *keys.PublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keys.PublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockKeyManager_GetPublicKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublicKey'
type mockKeyManager_GetPublicKey_Call struct {
	*mock.Call
}

// GetPublicKey is a helper method to define mock.On call
func (_e *mockKeyManager_Expecter) GetPublicKey() *mockKeyManager_GetPublicKey_Call {
	return &mockKeyManager_GetPublicKey_Call{Call: _e.mock.On("GetPublicKey")}
}

func (_c *mockKeyManager_GetPublicKey_Call) Run(run func()) *mockKeyManager_GetPublicKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockKeyManager_GetPublicKey_Call) Return(_a0 *keys.PublicKey, _a1 error) *mockKeyManager_GetPublicKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockKeyManager_GetPublicKey_Call) RunAndReturn(run func() (*keys.PublicKey, error)) *mockKeyManager_GetPublicKey_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockKeyManager interface {
	mock.TestingT
	Cleanup(func())
}

// newMockKeyManager creates a new instance of mockKeyManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockKeyManager(t mockConstructorTestingTnewMockKeyManager) *mockKeyManager {
	mock := &mockKeyManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
