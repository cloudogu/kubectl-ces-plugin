// Code generated by mockery v2.20.0. DO NOT EDIT.

package dogu_config

import mock "github.com/stretchr/testify/mock"

// mockKeyManagerFactory is an autogenerated mock type for the keyManagerFactory type
type mockKeyManagerFactory struct {
	mock.Mock
}

type mockKeyManagerFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *mockKeyManagerFactory) EXPECT() *mockKeyManagerFactory_Expecter {
	return &mockKeyManagerFactory_Expecter{mock: &_m.Mock}
}

// create provides a mock function with given fields: registry, doguName
func (_m *mockKeyManagerFactory) create(registry cesRegistry, doguName string) (keyManager, error) {
	ret := _m.Called(registry, doguName)

	var r0 keyManager
	var r1 error
	if rf, ok := ret.Get(0).(func(cesRegistry, string) (keyManager, error)); ok {
		return rf(registry, doguName)
	}
	if rf, ok := ret.Get(0).(func(cesRegistry, string) keyManager); ok {
		r0 = rf(registry, doguName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(keyManager)
		}
	}

	if rf, ok := ret.Get(1).(func(cesRegistry, string) error); ok {
		r1 = rf(registry, doguName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockKeyManagerFactory_create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'create'
type mockKeyManagerFactory_create_Call struct {
	*mock.Call
}

// create is a helper method to define mock.On call
//  - registry cesRegistry
//  - doguName string
func (_e *mockKeyManagerFactory_Expecter) create(registry interface{}, doguName interface{}) *mockKeyManagerFactory_create_Call {
	return &mockKeyManagerFactory_create_Call{Call: _e.mock.On("create", registry, doguName)}
}

func (_c *mockKeyManagerFactory_create_Call) Run(run func(registry cesRegistry, doguName string)) *mockKeyManagerFactory_create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(cesRegistry), args[1].(string))
	})
	return _c
}

func (_c *mockKeyManagerFactory_create_Call) Return(_a0 keyManager, _a1 error) *mockKeyManagerFactory_create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockKeyManagerFactory_create_Call) RunAndReturn(run func(cesRegistry, string) (keyManager, error)) *mockKeyManagerFactory_create_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockKeyManagerFactory interface {
	mock.TestingT
	Cleanup(func())
}

// newMockKeyManagerFactory creates a new instance of mockKeyManagerFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockKeyManagerFactory(t mockConstructorTestingTnewMockKeyManagerFactory) *mockKeyManagerFactory {
	mock := &mockKeyManagerFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
