// Code generated by mockery v2.20.0. DO NOT EDIT.

package portforward

import (
	mock "github.com/stretchr/testify/mock"
	httpstream "k8s.io/apimachinery/pkg/util/httpstream"
)

// mockDialer is an autogenerated mock type for the dialer type
type mockDialer struct {
	mock.Mock
}

type mockDialer_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDialer) EXPECT() *mockDialer_Expecter {
	return &mockDialer_Expecter{mock: &_m.Mock}
}

// Dial provides a mock function with given fields: protocols
func (_m *mockDialer) Dial(protocols ...string) (httpstream.Connection, string, error) {
	_va := make([]interface{}, len(protocols))
	for _i := range protocols {
		_va[_i] = protocols[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 httpstream.Connection
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(...string) (httpstream.Connection, string, error)); ok {
		return rf(protocols...)
	}
	if rf, ok := ret.Get(0).(func(...string) httpstream.Connection); ok {
		r0 = rf(protocols...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(httpstream.Connection)
		}
	}

	if rf, ok := ret.Get(1).(func(...string) string); ok {
		r1 = rf(protocols...)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(...string) error); ok {
		r2 = rf(protocols...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// mockDialer_Dial_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dial'
type mockDialer_Dial_Call struct {
	*mock.Call
}

// Dial is a helper method to define mock.On call
//  - protocols ...string
func (_e *mockDialer_Expecter) Dial(protocols ...interface{}) *mockDialer_Dial_Call {
	return &mockDialer_Dial_Call{Call: _e.mock.On("Dial",
		append([]interface{}{}, protocols...)...)}
}

func (_c *mockDialer_Dial_Call) Run(run func(protocols ...string)) *mockDialer_Dial_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *mockDialer_Dial_Call) Return(_a0 httpstream.Connection, _a1 string, _a2 error) *mockDialer_Dial_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *mockDialer_Dial_Call) RunAndReturn(run func(...string) (httpstream.Connection, string, error)) *mockDialer_Dial_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockDialer interface {
	mock.TestingT
	Cleanup(func())
}

// newMockDialer creates a new instance of mockDialer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockDialer(t mockConstructorTestingTnewMockDialer) *mockDialer {
	mock := &mockDialer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
