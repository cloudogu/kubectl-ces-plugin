// Code generated by mockery v2.20.0. DO NOT EDIT.

package portforward

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// mockPortForwarderFactory is an autogenerated mock type for the portForwarderFactory type
type mockPortForwarderFactory struct {
	mock.Mock
}

type mockPortForwarderFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *mockPortForwarderFactory) EXPECT() *mockPortForwarderFactory_Expecter {
	return &mockPortForwarderFactory_Expecter{mock: &_m.Mock}
}

// create provides a mock function with given fields: portForwardDialer, stopCh, readyCh, out, errOut
func (_m *mockPortForwarderFactory) create(portForwardDialer dialer, stopCh chan struct{}, readyCh chan struct{}, out io.Writer, errOut io.Writer) (portForwarder, error) {
	ret := _m.Called(portForwardDialer, stopCh, readyCh, out, errOut)

	var r0 portForwarder
	var r1 error
	if rf, ok := ret.Get(0).(func(dialer, chan struct{}, chan struct{}, io.Writer, io.Writer) (portForwarder, error)); ok {
		return rf(portForwardDialer, stopCh, readyCh, out, errOut)
	}
	if rf, ok := ret.Get(0).(func(dialer, chan struct{}, chan struct{}, io.Writer, io.Writer) portForwarder); ok {
		r0 = rf(portForwardDialer, stopCh, readyCh, out, errOut)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(portForwarder)
		}
	}

	if rf, ok := ret.Get(1).(func(dialer, chan struct{}, chan struct{}, io.Writer, io.Writer) error); ok {
		r1 = rf(portForwardDialer, stopCh, readyCh, out, errOut)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockPortForwarderFactory_create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'create'
type mockPortForwarderFactory_create_Call struct {
	*mock.Call
}

// create is a helper method to define mock.On call
//  - portForwardDialer dialer
//  - stopCh chan struct{}
//  - readyCh chan struct{}
//  - out io.Writer
//  - errOut io.Writer
func (_e *mockPortForwarderFactory_Expecter) create(portForwardDialer interface{}, stopCh interface{}, readyCh interface{}, out interface{}, errOut interface{}) *mockPortForwarderFactory_create_Call {
	return &mockPortForwarderFactory_create_Call{Call: _e.mock.On("create", portForwardDialer, stopCh, readyCh, out, errOut)}
}

func (_c *mockPortForwarderFactory_create_Call) Run(run func(portForwardDialer dialer, stopCh chan struct{}, readyCh chan struct{}, out io.Writer, errOut io.Writer)) *mockPortForwarderFactory_create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dialer), args[1].(chan struct{}), args[2].(chan struct{}), args[3].(io.Writer), args[4].(io.Writer))
	})
	return _c
}

func (_c *mockPortForwarderFactory_create_Call) Return(_a0 portForwarder, _a1 error) *mockPortForwarderFactory_create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockPortForwarderFactory_create_Call) RunAndReturn(run func(dialer, chan struct{}, chan struct{}, io.Writer, io.Writer) (portForwarder, error)) *mockPortForwarderFactory_create_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockPortForwarderFactory interface {
	mock.TestingT
	Cleanup(func())
}

// newMockPortForwarderFactory creates a new instance of mockPortForwarderFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockPortForwarderFactory(t mockConstructorTestingTnewMockPortForwarderFactory) *mockPortForwarderFactory {
	mock := &mockPortForwarderFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
