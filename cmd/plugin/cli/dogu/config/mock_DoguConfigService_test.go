// Code generated by mockery v2.20.0. DO NOT EDIT.

package config

import mock "github.com/stretchr/testify/mock"

// MockDoguConfigService is an autogenerated mock type for the DoguConfigService type
type MockDoguConfigService struct {
	mock.Mock
}

type MockDoguConfigService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDoguConfigService) EXPECT() *MockDoguConfigService_Expecter {
	return &MockDoguConfigService_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: doguName, registryKey
func (_m *MockDoguConfigService) Delete(doguName string, registryKey string) error {
	ret := _m.Called(doguName, registryKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(doguName, registryKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDoguConfigService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockDoguConfigService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - doguName string
//   - registryKey string
func (_e *MockDoguConfigService_Expecter) Delete(doguName interface{}, registryKey interface{}) *MockDoguConfigService_Delete_Call {
	return &MockDoguConfigService_Delete_Call{Call: _e.mock.On("Delete", doguName, registryKey)}
}

func (_c *MockDoguConfigService_Delete_Call) Run(run func(doguName string, registryKey string)) *MockDoguConfigService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockDoguConfigService_Delete_Call) Return(_a0 error) *MockDoguConfigService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDoguConfigService_Delete_Call) RunAndReturn(run func(string, string) error) *MockDoguConfigService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Edit provides a mock function with given fields: doguName, registryKey, registryValue
func (_m *MockDoguConfigService) Edit(doguName string, registryKey string, registryValue string) error {
	ret := _m.Called(doguName, registryKey, registryValue)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(doguName, registryKey, registryValue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDoguConfigService_Edit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Edit'
type MockDoguConfigService_Edit_Call struct {
	*mock.Call
}

// Edit is a helper method to define mock.On call
//   - doguName string
//   - registryKey string
//   - registryValue string
func (_e *MockDoguConfigService_Expecter) Edit(doguName interface{}, registryKey interface{}, registryValue interface{}) *MockDoguConfigService_Edit_Call {
	return &MockDoguConfigService_Edit_Call{Call: _e.mock.On("Edit", doguName, registryKey, registryValue)}
}

func (_c *MockDoguConfigService_Edit_Call) Run(run func(doguName string, registryKey string, registryValue string)) *MockDoguConfigService_Edit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDoguConfigService_Edit_Call) Return(_a0 error) *MockDoguConfigService_Edit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDoguConfigService_Edit_Call) RunAndReturn(run func(string, string, string) error) *MockDoguConfigService_Edit_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllForDogu provides a mock function with given fields: doguName
func (_m *MockDoguConfigService) GetAllForDogu(doguName string) (map[string]string, error) {
	ret := _m.Called(doguName)

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]string, error)); ok {
		return rf(doguName)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]string); ok {
		r0 = rf(doguName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(doguName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDoguConfigService_GetAllForDogu_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllForDogu'
type MockDoguConfigService_GetAllForDogu_Call struct {
	*mock.Call
}

// GetAllForDogu is a helper method to define mock.On call
//   - doguName string
func (_e *MockDoguConfigService_Expecter) GetAllForDogu(doguName interface{}) *MockDoguConfigService_GetAllForDogu_Call {
	return &MockDoguConfigService_GetAllForDogu_Call{Call: _e.mock.On("GetAllForDogu", doguName)}
}

func (_c *MockDoguConfigService_GetAllForDogu_Call) Run(run func(doguName string)) *MockDoguConfigService_GetAllForDogu_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDoguConfigService_GetAllForDogu_Call) Return(_a0 map[string]string, _a1 error) *MockDoguConfigService_GetAllForDogu_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDoguConfigService_GetAllForDogu_Call) RunAndReturn(run func(string) (map[string]string, error)) *MockDoguConfigService_GetAllForDogu_Call {
	_c.Call.Return(run)
	return _c
}

// GetValue provides a mock function with given fields: doguName, registryKey
func (_m *MockDoguConfigService) GetValue(doguName string, registryKey string) (string, error) {
	ret := _m.Called(doguName, registryKey)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(doguName, registryKey)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(doguName, registryKey)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(doguName, registryKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDoguConfigService_GetValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValue'
type MockDoguConfigService_GetValue_Call struct {
	*mock.Call
}

// GetValue is a helper method to define mock.On call
//   - doguName string
//   - registryKey string
func (_e *MockDoguConfigService_Expecter) GetValue(doguName interface{}, registryKey interface{}) *MockDoguConfigService_GetValue_Call {
	return &MockDoguConfigService_GetValue_Call{Call: _e.mock.On("GetValue", doguName, registryKey)}
}

func (_c *MockDoguConfigService_GetValue_Call) Run(run func(doguName string, registryKey string)) *MockDoguConfigService_GetValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockDoguConfigService_GetValue_Call) Return(_a0 string, _a1 error) *MockDoguConfigService_GetValue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDoguConfigService_GetValue_Call) RunAndReturn(run func(string, string) (string, error)) *MockDoguConfigService_GetValue_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockDoguConfigService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockDoguConfigService creates a new instance of MockDoguConfigService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDoguConfigService(t mockConstructorTestingTNewMockDoguConfigService) *MockDoguConfigService {
	mock := &MockDoguConfigService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
