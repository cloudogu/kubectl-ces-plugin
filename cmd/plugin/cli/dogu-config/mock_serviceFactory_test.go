// Code generated by mockery v2.20.0. DO NOT EDIT.

package dogu_config

import mock "github.com/stretchr/testify/mock"

// mockServiceFactory is an autogenerated mock type for the serviceFactory type
type mockServiceFactory struct {
	mock.Mock
}

type mockServiceFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *mockServiceFactory) EXPECT() *mockServiceFactory_Expecter {
	return &mockServiceFactory_Expecter{mock: &_m.Mock}
}

// create provides a mock function with given fields: doguName
func (_m *mockServiceFactory) create(doguName string) (doguConfigService, error) {
	ret := _m.Called(doguName)

	var r0 doguConfigService
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (doguConfigService, error)); ok {
		return rf(doguName)
	}
	if rf, ok := ret.Get(0).(func(string) doguConfigService); ok {
		r0 = rf(doguName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(doguConfigService)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(doguName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockServiceFactory_create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'create'
type mockServiceFactory_create_Call struct {
	*mock.Call
}

// create is a helper method to define mock.On call
//  - doguName string
func (_e *mockServiceFactory_Expecter) create(doguName interface{}) *mockServiceFactory_create_Call {
	return &mockServiceFactory_create_Call{Call: _e.mock.On("create", doguName)}
}

func (_c *mockServiceFactory_create_Call) Run(run func(doguName string)) *mockServiceFactory_create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockServiceFactory_create_Call) Return(_a0 doguConfigService, _a1 error) *mockServiceFactory_create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockServiceFactory_create_Call) RunAndReturn(run func(string) (doguConfigService, error)) *mockServiceFactory_create_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockServiceFactory interface {
	mock.TestingT
	Cleanup(func())
}

// newMockServiceFactory creates a new instance of mockServiceFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockServiceFactory(t mockConstructorTestingTnewMockServiceFactory) *mockServiceFactory {
	mock := &mockServiceFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
