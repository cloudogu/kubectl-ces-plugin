// Code generated by mockery v2.20.0. DO NOT EDIT.

package dogu_config

import (
	discovery "k8s.io/client-go/discovery"
	clientcmd "k8s.io/client-go/tools/clientcmd"

	meta "k8s.io/apimachinery/pkg/api/meta"

	mock "github.com/stretchr/testify/mock"

	rest "k8s.io/client-go/rest"
)

// mockRestClientGetter is an autogenerated mock type for the restClientGetter type
type mockRestClientGetter struct {
	mock.Mock
}

type mockRestClientGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *mockRestClientGetter) EXPECT() *mockRestClientGetter_Expecter {
	return &mockRestClientGetter_Expecter{mock: &_m.Mock}
}

// ToDiscoveryClient provides a mock function with given fields:
func (_m *mockRestClientGetter) ToDiscoveryClient() (discovery.CachedDiscoveryInterface, error) {
	ret := _m.Called()

	var r0 discovery.CachedDiscoveryInterface
	var r1 error
	if rf, ok := ret.Get(0).(func() (discovery.CachedDiscoveryInterface, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() discovery.CachedDiscoveryInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(discovery.CachedDiscoveryInterface)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockRestClientGetter_ToDiscoveryClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToDiscoveryClient'
type mockRestClientGetter_ToDiscoveryClient_Call struct {
	*mock.Call
}

// ToDiscoveryClient is a helper method to define mock.On call
func (_e *mockRestClientGetter_Expecter) ToDiscoveryClient() *mockRestClientGetter_ToDiscoveryClient_Call {
	return &mockRestClientGetter_ToDiscoveryClient_Call{Call: _e.mock.On("ToDiscoveryClient")}
}

func (_c *mockRestClientGetter_ToDiscoveryClient_Call) Run(run func()) *mockRestClientGetter_ToDiscoveryClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockRestClientGetter_ToDiscoveryClient_Call) Return(_a0 discovery.CachedDiscoveryInterface, _a1 error) *mockRestClientGetter_ToDiscoveryClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockRestClientGetter_ToDiscoveryClient_Call) RunAndReturn(run func() (discovery.CachedDiscoveryInterface, error)) *mockRestClientGetter_ToDiscoveryClient_Call {
	_c.Call.Return(run)
	return _c
}

// ToRESTConfig provides a mock function with given fields:
func (_m *mockRestClientGetter) ToRESTConfig() (*rest.Config, error) {
	ret := _m.Called()

	var r0 *rest.Config
	var r1 error
	if rf, ok := ret.Get(0).(func() (*rest.Config, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *rest.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Config)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockRestClientGetter_ToRESTConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToRESTConfig'
type mockRestClientGetter_ToRESTConfig_Call struct {
	*mock.Call
}

// ToRESTConfig is a helper method to define mock.On call
func (_e *mockRestClientGetter_Expecter) ToRESTConfig() *mockRestClientGetter_ToRESTConfig_Call {
	return &mockRestClientGetter_ToRESTConfig_Call{Call: _e.mock.On("ToRESTConfig")}
}

func (_c *mockRestClientGetter_ToRESTConfig_Call) Run(run func()) *mockRestClientGetter_ToRESTConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockRestClientGetter_ToRESTConfig_Call) Return(_a0 *rest.Config, _a1 error) *mockRestClientGetter_ToRESTConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockRestClientGetter_ToRESTConfig_Call) RunAndReturn(run func() (*rest.Config, error)) *mockRestClientGetter_ToRESTConfig_Call {
	_c.Call.Return(run)
	return _c
}

// ToRESTMapper provides a mock function with given fields:
func (_m *mockRestClientGetter) ToRESTMapper() (meta.RESTMapper, error) {
	ret := _m.Called()

	var r0 meta.RESTMapper
	var r1 error
	if rf, ok := ret.Get(0).(func() (meta.RESTMapper, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() meta.RESTMapper); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(meta.RESTMapper)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockRestClientGetter_ToRESTMapper_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToRESTMapper'
type mockRestClientGetter_ToRESTMapper_Call struct {
	*mock.Call
}

// ToRESTMapper is a helper method to define mock.On call
func (_e *mockRestClientGetter_Expecter) ToRESTMapper() *mockRestClientGetter_ToRESTMapper_Call {
	return &mockRestClientGetter_ToRESTMapper_Call{Call: _e.mock.On("ToRESTMapper")}
}

func (_c *mockRestClientGetter_ToRESTMapper_Call) Run(run func()) *mockRestClientGetter_ToRESTMapper_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockRestClientGetter_ToRESTMapper_Call) Return(_a0 meta.RESTMapper, _a1 error) *mockRestClientGetter_ToRESTMapper_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockRestClientGetter_ToRESTMapper_Call) RunAndReturn(run func() (meta.RESTMapper, error)) *mockRestClientGetter_ToRESTMapper_Call {
	_c.Call.Return(run)
	return _c
}

// ToRawKubeConfigLoader provides a mock function with given fields:
func (_m *mockRestClientGetter) ToRawKubeConfigLoader() clientcmd.ClientConfig {
	ret := _m.Called()

	var r0 clientcmd.ClientConfig
	if rf, ok := ret.Get(0).(func() clientcmd.ClientConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clientcmd.ClientConfig)
		}
	}

	return r0
}

// mockRestClientGetter_ToRawKubeConfigLoader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToRawKubeConfigLoader'
type mockRestClientGetter_ToRawKubeConfigLoader_Call struct {
	*mock.Call
}

// ToRawKubeConfigLoader is a helper method to define mock.On call
func (_e *mockRestClientGetter_Expecter) ToRawKubeConfigLoader() *mockRestClientGetter_ToRawKubeConfigLoader_Call {
	return &mockRestClientGetter_ToRawKubeConfigLoader_Call{Call: _e.mock.On("ToRawKubeConfigLoader")}
}

func (_c *mockRestClientGetter_ToRawKubeConfigLoader_Call) Run(run func()) *mockRestClientGetter_ToRawKubeConfigLoader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockRestClientGetter_ToRawKubeConfigLoader_Call) Return(_a0 clientcmd.ClientConfig) *mockRestClientGetter_ToRawKubeConfigLoader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockRestClientGetter_ToRawKubeConfigLoader_Call) RunAndReturn(run func() clientcmd.ClientConfig) *mockRestClientGetter_ToRawKubeConfigLoader_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockRestClientGetter interface {
	mock.TestingT
	Cleanup(func())
}

// newMockRestClientGetter creates a new instance of mockRestClientGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockRestClientGetter(t mockConstructorTestingTnewMockRestClientGetter) *mockRestClientGetter {
	mock := &mockRestClientGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
